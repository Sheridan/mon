# %Id%
include(CMakeCompiler.cmake)
PROJECT(mon)
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

OPTION( BUILD_COLLECTOR      "Build collector"                        ON  )
OPTION( BUILD_DEV_TOOLS      "Build development tools"                ON  )
OPTION( BUILD_NODE           "Build node"                             ON  )
OPTION( BUILD_STORAGE        "Build storage"                          ON  )
OPTION( BUILD_CLIENT_QT      "Build Qt client"                        OFF )
OPTION( BUILD_CLIENT_NCURSES "Build mon-client-qt"                    OFF )
OPTION( BUILD_UTILS          "Build non-mon utils"                    ON  )

SET(LIB_PREFIX_TARGET  "lib/mon"                     )
SET(LIB_GLOBAL_TARGET  "${LIB_PREFIX_TARGET}/global" )
SET(LIB_SENSORS_TARGET "${LIB_PREFIX_TARGET}/sensors")

function(install_headers_with_subdirs HEADER_LIST)
  foreach(HEADER ${HEADER_LIST})
    string(REGEX MATCH "(.*)[/\\]" DIR ${HEADER})
    install(FILES ${HEADER} DESTINATION include/mon/${DIR})
  endforeach(HEADER)
endfunction(install_headers_with_subdirs)

include(CMakeDebug.cmake)

install(FILES CMakeDebug.cmake DESTINATION include/mon)
install(FILES CMakeSensor.cmake DESTINATION include/mon)
install(FILES CMakeCompiler.cmake DESTINATION include/mon)

set( GEN_PATH "${PROJECT_BINARY_DIR}/mon_generated_sources" )
file(MAKE_DIRECTORY ${GEN_PATH})
file(WRITE  ${GEN_PATH}/generated.h "/* Generated by CMake */\n\n#ifndef MON_CMAKE_GENERATED\n#define MON_CMAKE_GENERATED\n\n"  )
file(APPEND ${GEN_PATH}/generated.h "#define MON_GENERATED_LIBRARY_PATH \"${CMAKE_INSTALL_PREFIX}/${LIB_GLOBAL_TARGET}\"\n"  )
file(APPEND ${GEN_PATH}/generated.h "#define MON_GENERATED_SENSORS_PATH \"${CMAKE_INSTALL_PREFIX}/${LIB_SENSORS_TARGET}\"\n" )
file(APPEND ${GEN_PATH}/generated.h "\n#endif\n" )

include_directories( ${GEN_PATH} mon . )
# +++++++++++++++++++ libaryes +++++++++++++++++++
function(add_mon_library target_name headers sources)
  MESSAGE ( STATUS "Library: ${target_name}" )
  add_library(${target_name} SHARED ${headers} ${sources})
  target_link_libraries(${target_name} pthread ${GLOBAL_LINK_LIBS})
  install_headers_with_subdirs("${headers}")
  install(TARGETS ${target_name} LIBRARY DESTINATION ${LIB_GLOBAL_TARGET})
endfunction(add_mon_library)

# --------- config library --------------
SET(mon-config-lib-headers     
    libraryes/config/model/pathinterface.h
    libraryes/config/rw/cconfigurationparcer.h
    libraryes/config/rw/cconfigurationgenerator.h
    libraryes/config/rw/ccmdlineparcer.h
    libraryes/config/cconfig.h
    libraryes/config/model/cnode.h
    libraryes/config/model/cfile.h
    libraryes/config/model/cfolder.h
    libraryes/config/config.h )
SET(mon-config-lib-sources
    libraryes/config/main.cpp
    libraryes/config/rw/cconfigurationparcer.cpp
    libraryes/config/rw/cconfigurationgenerator.cpp
    libraryes/config/rw/ccmdlineparcer.cpp
    libraryes/config/cconfig.cpp
    libraryes/config/model/cnode.cpp
    libraryes/config/model/cfile.cpp
    libraryes/config/model/cfolder.cpp)
add_mon_library(config
             "${mon-config-lib-headers}"
             "${mon-config-lib-sources}")

# --------- logger library --------------
SET(mon-logger-lib-headers
    libraryes/logger/logger.h
    libraryes/logger/clogmessage.h
    libraryes/logger/clogger.h  )
SET(mon-logger-lib-sources
    libraryes/logger/main.cpp
    libraryes/logger/clogmessage.cpp
    libraryes/logger/clogger.cpp )
add_mon_library(logger
             "${mon-logger-lib-headers}"
             "${mon-logger-lib-sources}")

# --------- network library --------------
SET(mon-network-lib-headers
    libraryes/network/csocket.h
    libraryes/network/cserversocket.h
    libraryes/network/cclientsocket.h )
SET(mon-network-lib-sources
    libraryes/network/main.cpp
    libraryes/network/csocket.cpp
    libraryes/network/cserversocket.cpp
    libraryes/network/cclientsocket.cpp )
add_mon_library(network
             "${mon-network-lib-headers}"
             "${mon-network-lib-sources}")

# --------- sensordata library --------------
SET(mon-sensordata-lib-headers
    libraryes/sensordata/data/cdefinition.h
    libraryes/sensordata/data/cframe.h
    libraryes/sensordata/data/cfrequency.h
    libraryes/sensordata/data/cfield.h
    libraryes/sensordata/data/cstatisticcache.h
    libraryes/sensordata/data/cstatisticdata.h
    libraryes/sensordata/parcers/cdefinitionparcer.h
    libraryes/sensordata/parcers/cdefinitiongenerator.h )
SET(mon-sensordata-lib-sources
    libraryes/sensordata/data/cdefinition.cpp
    libraryes/sensordata/data/cframe.cpp
    libraryes/sensordata/data/cfrequency.cpp
    libraryes/sensordata/data/cfield.cpp
    libraryes/sensordata/data/cstatisticcache.cpp
    libraryes/sensordata/data/cstatisticdata.cpp
    libraryes/sensordata/parcers/cdefinitionparcer.cpp
    libraryes/sensordata/parcers/cdefinitiongenerator.cpp
    libraryes/sensordata/main.cpp )
add_mon_library(sensordata
             "${mon-sensordata-lib-headers}"
             "${mon-sensordata-lib-sources}")

# --------- sensorplugin library --------------
SET(mon-sensorplugin-lib-headers
    libraryes/sensorplugin/csensorplugin.h
    libraryes/sensorplugin/cframesetbuilder.h)
SET(mon-sensorplugin-lib-sources
    libraryes/sensorplugin/csensorplugin.cpp
    libraryes/sensorplugin/cframesetbuilder.cpp
    libraryes/sensorplugin/main.cpp )
add_mon_library(sensorplugin
             "${mon-sensorplugin-lib-headers}"
             "${mon-sensorplugin-lib-sources}")

# --------- protocol library --------------
SET(mon-protocol-lib-headers
    libraryes/protocol/cprotocol.h
    libraryes/protocol/cnetworkmessage.h)
SET(mon-protocol-lib-sources
    libraryes/protocol/cprotocol.cpp
    libraryes/protocol/cnetworkmessage.cpp
    libraryes/protocol/main.cpp )
add_mon_library(protocol
             "${mon-protocol-lib-headers}"
             "${mon-protocol-lib-sources}")

# --------- model library --------------
SET(mon-model-lib-headers
    libraryes/model/citems.h
    libraryes/model/csensor.h
    libraryes/model/cnode.h
    libraryes/model/cnodes.h
    libraryes/model/ccollector.h
    libraryes/model/ccollectors.h
    )
SET(mon-model-lib-sources
    libraryes/model/citems.cpp
    libraryes/model/csensor.cpp
    libraryes/model/cnode.cpp
    libraryes/model/cnodes.cpp
    libraryes/model/ccollector.cpp
    libraryes/model/ccollectors.cpp
    libraryes/model/main.cpp )
add_mon_library(model
             "${mon-model-lib-headers}"
             "${mon-model-lib-sources}")

# --------- base library --------------
SET(mon-base-lib-headers
    libraryes/base/singleton/csingletonmember.h
    libraryes/base/singleton/csingleton.h
    libraryes/base/string/cvariant.h
    libraryes/base/timer/ctimer.h
    libraryes/base/sequrity/csystemrights.h
    libraryes/base/string/cstringbuilder.h
    libraryes/base/parcer/cparcer.h
    libraryes/base/parcer/cparcerfile.h
    libraryes/base/parcer/cparcerstring.h
    libraryes/base/string/stringhelper.h
    libraryes/base/parcer/parcer-helper.h)
SET(mon-base-lib-sources
    libraryes/base/main.cpp
    libraryes/base/singleton/csingletonmember.cpp
    libraryes/base/singleton/csingleton.cpp
    libraryes/base/string/cvariant.cpp
    libraryes/base/timer/ctimer.cpp
    libraryes/base/sequrity/csystemrights.cpp
    libraryes/base/string/cstringbuilder.cpp
    libraryes/base/parcer/cparcer.cpp
    libraryes/base/parcer/cparcerfile.cpp
    libraryes/base/parcer/cparcerstring.cpp
    libraryes/base/string/stringhelper.cpp)
set(mon-base-lib-link-libraryes "")
add_mon_library(base
             "${mon-base-lib-headers}"
             "${mon-base-lib-sources}")

# +++++++++++++++++++ libaryes +++++++++++++++++++
# +++++++++++++++++++ install some headers +++++++++++++++++++
set(defines-headers
  defines/sensor-defines.h
  defines/logger-helper.h
  defines/file-operations-defines.h
  defines/protocol-control.h
  defines/mutex-helper.h
  defines/class-helper.h)
  install_headers_with_subdirs("${defines-headers}")
# +++++++++++++++++++ install some headers +++++++++++++++++++

# +++++++++++++++++++ tools +++++++++++++++++++
function(add_tool target_name dependencies libraryes headers sources)
  MESSAGE ( STATUS "Tool: ${target_name}" )
  add_executable(${target_name} ${headers} ${sources})
  add_dependencies(${target_name} ${dependencies})
  target_link_libraries(${target_name} ${libraryes} ${GLOBAL_LINK_LIBS})
  install(TARGETS ${target_name} RUNTIME DESTINATION bin )
endfunction(add_tool)

IF( BUILD_DEV_TOOLS )

  SET(mon-text-to-char-array-headers tools/mon-text-to-char-array/main.h)
  SET(mon-text-to-char-array-sources tools/mon-text-to-char-array/main.cpp)
  SET(mon-text-to-char-array-dependencies base config logger sensordata)
  SET(mon-text-to-char-array-link-libraryes "${mon-text-to-char-array-dependencies}" dl)
  add_tool(mon-text-to-char-array
             "${mon-text-to-char-array-dependencies}"
             "${mon-text-to-char-array-link-libraryes}"
             "${mon-text-to-char-array-headers}"
             "${mon-text-to-char-array-sources}")

#  SET(mon-sensor-test-headers tools/mon-sensor-test/main.h)
#  SET(mon-sensor-test-sources tools/mon-sensor-test/main.cpp)
#  SET(mon-sensor-test-dependencies base config logger sensordata)
#  SET(mon-sensor-test-link-libraryes "${mon-sensor-test-dependencies}" dl)
#  add_tool(mon-sensor-test
#             "${mon-sensor-test-dependencies}"
#             "${mon-sensor-test-link-libraryes}"
#             "${mon-sensor-test-headers}"
#             "${mon-sensor-test-sources}")

ENDIF( BUILD_DEV_TOOLS )

IF( BUILD_UTILS )

  SET(confgen-headers utils/confgen/main.h)
  SET(confgen-sources utils/confgen/main.cpp)
  SET(confgen-dependencies base config logger)
  SET(confgen-link-libraryes "${confgen-dependencies}" dl)
  add_tool(mon-confgen
             "${confgen-dependencies}"
             "${confgen-link-libraryes}"
             "${confgen-headers}"
             "${confgen-sources}")

ENDIF( BUILD_UTILS )
# +++++++++++++++++++ tools +++++++++++++++++++
# +++++++++++++++++++ daemons +++++++++++++++++++

function(add_daemon target_name dependencies libraryes headers sources)
  MESSAGE ( STATUS "Daemon: ${target_name}" )
  add_executable(${target_name} ${headers} ${sources})
  add_dependencies(${target_name} ${dependencies})
  target_link_libraries(${target_name} ${libraryes} ${GLOBAL_LINK_LIBS})
  install(TARGETS ${target_name} RUNTIME DESTINATION bin )
endfunction(add_daemon)

IF( BUILD_COLLECTOR )
  SET(mon-collector-headers
      daemons/collector/node/cnode.h
      daemons/collector/node/csensor.h
      daemons/collector/node/cnodes.h
      daemons/collector/protocol/cprotocol.h
      daemons/collector/collector_st.h)
  SET(mon-collector-sources
      daemons/collector/node/cnode.cpp
      daemons/collector/node/csensor.cpp
      daemons/collector/node/cnodes.cpp
      daemons/collector/protocol/cprotocol.cpp
      daemons/collector/main.cpp )
  set(mon-collector-dependencies base config logger network protocol sensordata model)
  set(mon-collector-link-libraryes "${mon-collector-dependencies}")
  add_daemon(mon-collector
             "${mon-collector-dependencies}"
             "${mon-collector-link-libraryes}"
             "${mon-collector-headers}"
             "${mon-collector-sources}")
ENDIF( BUILD_COLLECTOR )

IF( BUILD_NODE )
  SET(mon-node-headers
      daemons/node/collector/ccollectors.h
      daemons/node/collector/ccollector.h
      daemons/node/protocol/cprotocol.h
      daemons/node/sensor/csensor.h
      daemons/node/sensor/cframe.h
      daemons/node/sensor/csensorsmanager.h
      daemons/node/node_st.h)
  SET(mon-node-sources
      daemons/node/collector/ccollectors.cpp
      daemons/node/collector/ccollector.cpp
      daemons/node/protocol/cprotocol.cpp
      daemons/node/sensor/csensor.cpp
      daemons/node/sensor/cframe.cpp
      daemons/node/sensor/csensorsmanager.cpp
      daemons/node/main.cpp )
  set(mon-node-dependencies base config logger network protocol sensordata model)
  set(mon-node-link-libraryes "${mon-node-dependencies}" dl)
  add_daemon(mon-node
             "${mon-node-dependencies}"
             "${mon-node-link-libraryes}"
             "${mon-node-headers}"
             "${mon-node-sources}")
ENDIF( BUILD_NODE )

IF( BUILD_STORAGE )
  SET(mon-storage-headers
      daemons/storage/storage_st.h
      daemons/storage/protocol/cprotocol.h
      daemons/storage/database/cdatabase.h
      daemons/storage/cstorage.h)
  SET(mon-storage-sources
      daemons/storage/cstorage.cpp
      daemons/storage/protocol/cprotocol.cpp
      daemons/storage/database/cdatabase.cpp
      daemons/storage/main.cpp )
  set(mon-storage-dependencies base config logger network protocol sensordata model)
  set(mon-storage-link-libraryes "${mon-storage-dependencies}" dl)
  add_daemon(mon-storage
             "${mon-storage-dependencies}"
             "${mon-storage-link-libraryes}"
             "${mon-storage-headers}"
             "${mon-storage-sources}")
ENDIF( BUILD_STORAGE )
# +++++++++++++++++++ daemons +++++++++++++++++++
