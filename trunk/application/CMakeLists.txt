# %Id%
PROJECT(mon)
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

OPTION ( BUILD_SERVER         "Build server"                           OFF )
OPTION ( BUILD_NODE           "Build node"                             ON  )
OPTION ( BUILD_CLIENT_QT      "Build Qt client"                        OFF )
OPTION ( BUILD_CLIENT_NCURSES "Build mon-client-qt"                    OFF )

SET(LIB_PREFIX_TARGET  "lib/mon"                     )
SET(LIB_GLOBAL_TARGET  "${LIB_PREFIX_TARGET}/global" )
SET(LIB_SENSORS_TARGET "${LIB_PREFIX_TARGET}/sensors")

include(CMakeDebug.cmake)
install(FILES CMakeDebug.cmake DESTINATION include/mon)
install(FILES CMakeSensor.cmake DESTINATION include/mon)

MESSAGE ( STATUS "---> Configuring base" )

set( GEN_PATH "${PROJECT_BINARY_DIR}/mon_generated_sources" )
file(MAKE_DIRECTORY ${GEN_PATH})
file(WRITE  ${GEN_PATH}/generated.h "/* Generated by CMake */\n\n#ifndef MON_CMAKE_GENERATED\n#define MON_CMAKE_GENERATED\n\n"  )
file(APPEND ${GEN_PATH}/generated.h "#define MON_GENERATED_LIBRARY_PATH \"${CMAKE_INSTALL_PREFIX}/${LIB_GLOBAL_TARGET}\"\n"  )
file(APPEND ${GEN_PATH}/generated.h "#define MON_GENERATED_SENSORS_PATH \"${CMAKE_INSTALL_PREFIX}/${LIB_SENSORS_TARGET}\"\n" )
file(APPEND ${GEN_PATH}/generated.h "\n#endif\n" )

# +++++++++++++++++++ tools +++++++++++++++++++
add_executable( mon-text-to-char-array tools/mon-text-to-char-array/main.cpp)
install(TARGETS mon-text-to-char-array RUNTIME DESTINATION bin )
# +++++++++++++++++++ tools +++++++++++++++++++


# +++++++++++++++++++ libaryes +++++++++++++++++++

# --------- config library --------------
SET(mon-config-headers
    libraryes/config/src/pathinterface.h
    libraryes/config/src/cvariant.h
    libraryes/config/src/cparcer.h
    libraryes/config/src/cgenerator.h
    libraryes/config/src/cconfig.h
    libraryes/config/src/cnode.h
    libraryes/config/src/cfile.h
    libraryes/config/src/cfolder.h
    libraryes/config/src/config.h )
SET(mon-config-sources
    libraryes/config/src/main.cpp
    libraryes/config/src/cvariant.cpp
    libraryes/config/src/cparcer.cpp
    libraryes/config/src/cgenerator.cpp
    libraryes/config/src/cconfig.cpp
    libraryes/config/src/cnode.cpp
    libraryes/config/src/cfile.cpp
    libraryes/config/src/cfolder.cpp)
add_library(config SHARED ${mon-config-headers} ${mon-config-sources})
install(FILES ${mon-config-headers} DESTINATION include/mon )
install(TARGETS config LIBRARY DESTINATION ${LIB_GLOBAL_TARGET})

# --------- logger library --------------
SET(mon-logger-headers
    libraryes/logger/src/logger.h
    libraryes/logger/src/clogmessage.h
    libraryes/logger/src/clogger.h  )
SET(mon-logger-sources
    libraryes/logger/src/main.cpp
    libraryes/logger/src/clogmessage.cpp
    libraryes/logger/src/clogger.cpp )
add_library(logger SHARED ${mon-logger-headers} ${mon-logger-sources})
install(FILES ${mon-logger-headers} DESTINATION include/mon )
install(TARGETS logger LIBRARY DESTINATION ${LIB_GLOBAL_TARGET})

# --------- network library --------------
SET(mon-network-headers
    libraryes/network/src/csocket.h
    libraryes/network/src/cserversocket.h
    libraryes/network/src/cclientsocket.h )
SET(mon-network-sources
    libraryes/network/src/main.cpp
    libraryes/network/src/csocket.cpp
    libraryes/network/src/cserversocket.cpp
    libraryes/network/src/cclientsocket.cpp )
add_library(network SHARED ${mon-network-headers} ${mon-network-sources})
target_link_libraries(network pthread)
install(FILES ${mon-network-headers} DESTINATION include/mon )
install(TARGETS network LIBRARY DESTINATION ${LIB_GLOBAL_TARGET})

# --------- protocol library --------------
SET(mon-protocol-headers
    libraryes/protocol/src/data/cdefinition.h
    libraryes/protocol/src/data/cinformation.h
    libraryes/protocol/src/data/cstatistics.h
    libraryes/protocol/src/parcers/cdefinitionparcer.h
    libraryes/protocol/src/parcers/cinformationparcer.h
    libraryes/protocol/src/parcers/cstatisticsparcer.h)
SET(mon-protocol-sources
    libraryes/protocol/src/data/cdefinition.cpp
    libraryes/protocol/src/data/cinformation.cpp
    libraryes/protocol/src/data/cstatistics.cpp
    libraryes/protocol/src/parcers/cdefinitionparcer.cpp
    libraryes/protocol/src/parcers/cinformationparcer.cpp
    libraryes/protocol/src/parcers/cstatisticsparcer.cpp
    libraryes/protocol/src/main.cpp )
add_library(protocol SHARED ${mon-protocol-headers} ${mon-protocol-sources})
#install(FILES ${mon-protocol-headers} DESTINATION include/mon )
install(TARGETS protocol LIBRARY DESTINATION ${LIB_GLOBAL_TARGET})

# --------- base library --------------
SET(mon-base-headers
    libraryes/base/src/csingletonmember.h
    libraryes/base/src/csingleton.h )
SET(mon-base-sources
    libraryes/base/src/main.cpp
    libraryes/base/src/csingletonmember.cpp
    libraryes/base/src/csingleton.cpp )
add_library(base SHARED ${mon-base-headers} ${mon-base-sources})
install(TARGETS base LIBRARY DESTINATION ${LIB_GLOBAL_TARGET})

# +++++++++++++++++++ libaryes +++++++++++++++++++
# +++++++++++++++++++ install for sensors +++++++++++++++++++
install(FILES defines/sensor-defines.h DESTINATION include/mon )
# +++++++++++++++++++ install for sensors +++++++++++++++++++
# +++++++++++++++++++ applications +++++++++++++++++++
add_dependencies(base config logger network protocol)
target_link_libraries(base config logger network protocol)
include_directories( ${GEN_PATH}
                     libraryes/base/src
                     libraryes/network/src
                     libraryes/logger/src
                     libraryes/config/src
                     libraryes/protocol/src
                     libraryes/protocol/src/data
                     libraryes/protocol/src/parcers
                     defines )

function(add_run target_name)
  file(WRITE ${GEN_PATH}/${target_name}-run "#!/bin/bash\n\nLD_LIBRARY_PATH=\"\${LD_LIBRARY_PATH}:${CMAKE_INSTALL_PREFIX}/${LIB_GLOBAL_TARGET}\" ./${target_name}\n\n"  )
  install(FILES ${GEN_PATH}/${target_name}-run
          DESTINATION bin
          PERMISSIONS
            OWNER_READ OWNER_WRITE OWNER_EXECUTE
            GROUP_READ GROUP_EXECUTE
            WORLD_READ WORLD_EXECUTE)
endfunction(add_run)

function(add_daemon target_name)
  add_dependencies(${target_name} base)
  target_link_libraries(${target_name} base)
  install(TARGETS ${target_name} RUNTIME DESTINATION bin )
  add_run(${target_name})
endfunction(add_daemon)

IF( BUILD_SERVER )
  MESSAGE ( STATUS "---> Configuring server" )
  SET(mon-server-headers
        daemons/server/src/server_st.h
        daemons/server/src/nodes/cremotemonnode.h
        daemons/server/src/nodes/cmonnodesmanager.h
     )
  SET(mon-server-sources
      daemons/server/src/nodes/cremotemonnode.cpp
      daemons/server/src/nodes/cmonnodesmanager.cpp
      daemons/server/src/main.cpp )
  include_directories( daemons/server/src daemons/server/src/nodes )
  add_executable( mon-server ${mon-server-headers} ${mon-server-sources})
  add_daemon(mon-server)
ENDIF( BUILD_SERVER )

IF( BUILD_NODE )
  MESSAGE ( STATUS "---> Configuring node" )
  SET(mon-node-headers
      daemons/node/src/node_st.h
      daemons/node/src/network/cmonnodesocketserver.h
  )
  SET(mon-node-sources
      daemons/node/src/network/cmonnodesocketserver.cpp
      daemons/node/src/main.cpp )
  include_directories( daemons/node/src daemons/node/src/network )
  add_executable( mon-node ${mon-node-headers} ${mon-node-sources})
  add_daemon(mon-node)
ENDIF( BUILD_NODE )
# +++++++++++++++++++ applications +++++++++++++++++++
