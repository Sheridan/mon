# %Id%
include(CMakeCompiler.cmake)
PROJECT(mon)
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

OPTION( BUILD_COLLECTOR      "Build collector"                        ON  )
OPTION( BUILD_DEV_TOOLS      "Build development tools"                ON  )
OPTION( BUILD_NODE           "Build node"                             ON  )
OPTION( BUILD_STORAGE        "Build storage"                          ON  )
OPTION( BUILD_CLIENT_QT      "Build Qt client"                        OFF )
OPTION( BUILD_CLIENT_NCURSES "Build mon-client-qt"                    OFF )

SET(LIB_PREFIX_TARGET  "lib/mon"                     )
SET(LIB_GLOBAL_TARGET  "${LIB_PREFIX_TARGET}/global" )
SET(LIB_SENSORS_TARGET "${LIB_PREFIX_TARGET}/sensors")


include(CMakeDebug.cmake)

install(FILES CMakeDebug.cmake DESTINATION include/mon)
install(FILES CMakeSensor.cmake DESTINATION include/mon)
install(FILES CMakeCompiler.cmake DESTINATION include/mon)

MESSAGE( STATUS "---> Processing base" )

set( GEN_PATH "${PROJECT_BINARY_DIR}/mon_generated_sources" )
file(MAKE_DIRECTORY ${GEN_PATH})
file(WRITE  ${GEN_PATH}/generated.h "/* Generated by CMake */\n\n#ifndef MON_CMAKE_GENERATED\n#define MON_CMAKE_GENERATED\n\n"  )
file(APPEND ${GEN_PATH}/generated.h "#define MON_GENERATED_LIBRARY_PATH \"${CMAKE_INSTALL_PREFIX}/${LIB_GLOBAL_TARGET}\"\n"  )
file(APPEND ${GEN_PATH}/generated.h "#define MON_GENERATED_SENSORS_PATH \"${CMAKE_INSTALL_PREFIX}/${LIB_SENSORS_TARGET}\"\n" )
file(APPEND ${GEN_PATH}/generated.h "\n#endif\n" )

# +++++++++++++++++++ libaryes +++++++++++++++++++
# --------- config library --------------
MESSAGE( STATUS "---> Processing `config` library" )
SET(mon-config-lib-headers
    libraryes/config/model/pathinterface.h
    libraryes/config/rw/cconfigurationparcer.h
    libraryes/config/rw/cconfigurationgenerator.h
    libraryes/config/cconfig.h
    libraryes/config/model/cnode.h
    libraryes/config/model/cfile.h
    libraryes/config/model/cfolder.h
    libraryes/config/config.h )
SET(mon-config-lib-sources
    libraryes/config/main.cpp
    libraryes/config/rw/cconfigurationparcer.cpp
    libraryes/config/rw/cconfigurationgenerator.cpp
    libraryes/config/cconfig.cpp
    libraryes/config/model/cnode.cpp
    libraryes/config/model/cfile.cpp
    libraryes/config/model/cfolder.cpp)
add_library(config SHARED ${mon-config-lib-headers} ${mon-config-lib-sources})
target_link_libraries(config ${GLOBAL_LINK_LIBS})
install(FILES ${mon-config-lib-headers} DESTINATION include/mon )
install(TARGETS config LIBRARY DESTINATION ${LIB_GLOBAL_TARGET})

# --------- logger library --------------
MESSAGE ( STATUS "---> Processing `logger` library" )
SET(mon-logger-lib-headers
    libraryes/logger/logger.h
    libraryes/logger/clogmessage.h
    libraryes/logger/clogger.h  )
SET(mon-logger-lib-sources
    libraryes/logger/main.cpp
    libraryes/logger/clogmessage.cpp
    libraryes/logger/clogger.cpp )
add_library(logger SHARED ${mon-logger-lib-headers} ${mon-logger-lib-sources})
target_link_libraries(logger ${GLOBAL_LINK_LIBS})
install(FILES ${mon-logger-lib-headers} DESTINATION include/mon )
install(TARGETS logger LIBRARY DESTINATION ${LIB_GLOBAL_TARGET})

# --------- network library --------------
MESSAGE ( STATUS "---> Processing `network` library" )
SET(mon-network-lib-headers
    libraryes/network/csocket.h
    libraryes/network/cserversocket.h
    libraryes/network/cclientsocket.h )
SET(mon-network-lib-sources
    libraryes/network/main.cpp
    libraryes/network/csocket.cpp
    libraryes/network/cserversocket.cpp
    libraryes/network/cclientsocket.cpp )
add_library(network SHARED ${mon-network-lib-headers} ${mon-network-lib-sources})
target_link_libraries(network pthread ${GLOBAL_LINK_LIBS})
install(FILES ${mon-network-lib-headers} DESTINATION include/mon )
install(TARGETS network LIBRARY DESTINATION ${LIB_GLOBAL_TARGET})

# --------- sensordata library --------------
MESSAGE ( STATUS "---> Processing `sensordata` library" )
SET(mon-sensordata-lib-headers
    libraryes/sensordata/data/cdefinition.h
    libraryes/sensordata/data/cframe.h
    libraryes/sensordata/data/cfrequency.h
    libraryes/sensordata/data/cfield.h
    libraryes/sensordata/data/cstatisticcache.h
    libraryes/sensordata/data/cstatisticdata.h
    libraryes/sensordata/parcers/cdefinitionparcer.h
    libraryes/sensordata/parcers/cdefinitiongenerator.h )
SET(mon-sensordata-lib-sources
    libraryes/sensordata/data/cdefinition.cpp
    libraryes/sensordata/data/cframe.cpp
    libraryes/sensordata/data/cfrequency.cpp
    libraryes/sensordata/data/cfield.cpp
    libraryes/sensordata/data/cstatisticcache.cpp
    libraryes/sensordata/data/cstatisticdata.cpp
    libraryes/sensordata/parcers/cdefinitionparcer.cpp
    libraryes/sensordata/parcers/cdefinitiongenerator.cpp
    libraryes/sensordata/main.cpp )
add_library(sensordata SHARED ${mon-sensordata-lib-headers} ${mon-sensordata-lib-sources})
target_link_libraries(sensordata ${GLOBAL_LINK_LIBS})
install(FILES ${mon-sensordata-lib-headers} DESTINATION include/mon )
install(TARGETS sensordata LIBRARY DESTINATION ${LIB_GLOBAL_TARGET})

# --------- sensorplugin library --------------
MESSAGE ( STATUS "---> Processing `sensorplugin` library" )
SET(mon-sensorplugin-lib-headers
    libraryes/sensorplugin/csensorplugin.h
    libraryes/sensorplugin/cframesetbuilder.h)
SET(mon-sensorplugin-lib-sources
    libraryes/sensorplugin/csensorplugin.cpp
    libraryes/sensorplugin/cframesetbuilder.cpp
    libraryes/sensorplugin/main.cpp )
add_library(sensorplugin SHARED ${mon-sensorplugin-lib-headers} ${mon-sensorplugin-lib-sources})
target_link_libraries(sensorplugin ${GLOBAL_LINK_LIBS})
install(FILES ${mon-sensorplugin-lib-headers} DESTINATION include/mon )
install(TARGETS sensorplugin LIBRARY DESTINATION ${LIB_GLOBAL_TARGET})

# --------- protocol library --------------
MESSAGE ( STATUS "---> Processing `protocol` library" )
SET(mon-protocol-lib-headers
    libraryes/protocol/cprotocol.h
    libraryes/protocol/cnetworkmessage.h)
SET(mon-protocol-lib-sources
    libraryes/protocol/cprotocol.cpp
    libraryes/protocol/cnetworkmessage.cpp
    libraryes/protocol/main.cpp )
add_library(protocol SHARED ${mon-protocol-lib-headers} ${mon-protocol-lib-sources})
target_link_libraries(protocol ${GLOBAL_LINK_LIBS})
install(FILES ${mon-protocol-lib-headers} DESTINATION include/mon )
install(TARGETS protocol LIBRARY DESTINATION ${LIB_GLOBAL_TARGET})

# --------- node library --------------
MESSAGE ( STATUS "---> Processing `node` library" )
SET(mon-node-lib-headers
    )
SET(mon-node-lib-sources
    libraryes/node/main.cpp )
add_library(node SHARED ${mon-node-lib-headers} ${mon-node-lib-sources})
target_link_libraries(node ${GLOBAL_LINK_LIBS})
install(FILES ${mon-node-lib-headers} DESTINATION include/mon )
install(TARGETS node LIBRARY DESTINATION ${LIB_GLOBAL_TARGET})

# --------- collector library --------------
MESSAGE ( STATUS "---> Processing `collector` library" )
SET(mon-collector-lib-headers
    )
SET(mon-collector-lib-sources
    libraryes/collector/main.cpp )
add_library(collector SHARED ${mon-collector-lib-headers} ${mon-collector-lib-sources})
target_link_libraries(collector ${GLOBAL_LINK_LIBS})
install(FILES ${mon-collector-lib-headers} DESTINATION include/mon )
install(TARGETS collector LIBRARY DESTINATION ${LIB_GLOBAL_TARGET})

# --------- base library --------------
MESSAGE ( STATUS "---> Processing `base` library" )
SET(mon-base-lib-headers
    libraryes/base/singleton/csingletonmember.h
    libraryes/base/singleton/csingleton.h
    libraryes/base/string/cvariant.h
    libraryes/base/timer/ctimer.h
    libraryes/base/sequrity/csystemrights.h
    libraryes/base/string/cstringbuilder.h
    libraryes/base/parcer/cparcer.h
    libraryes/base/parcer/cparcerfile.h
    libraryes/base/parcer/cparcerstring.h
    libraryes/base/string/stringhelper.h
    libraryes/base/parcer/parcer-helper.h)
SET(mon-base-lib-sources
    libraryes/base/main.cpp
    libraryes/base/singleton/csingletonmember.cpp
    libraryes/base/singleton/csingleton.cpp
    libraryes/base/string/cvariant.cpp
    libraryes/base/timer/ctimer.cpp
    libraryes/base/sequrity/csystemrights.cpp
    libraryes/base/string/cstringbuilder.cpp
    libraryes/base/parcer/cparcer.cpp
    libraryes/base/parcer/cparcerfile.cpp
    libraryes/base/parcer/cparcerstring.cpp
    libraryes/base/string/stringhelper.cpp)
add_library(base SHARED ${mon-base-lib-headers} ${mon-base-lib-sources})
target_link_libraries(base ${GLOBAL_LINK_LIBS})
install(FILES ${mon-base-lib-headers} DESTINATION include/mon )
install(TARGETS base LIBRARY DESTINATION ${LIB_GLOBAL_TARGET})

# +++++++++++++++++++ libaryes +++++++++++++++++++
# +++++++++++++++++++ install some headers +++++++++++++++++++
install(FILES defines/sensor-defines.h DESTINATION include/mon )
install(FILES defines/logger-helper.h DESTINATION include/mon )
install(FILES defines/file-operations-defines.h DESTINATION include/mon )
install(FILES defines/protocol-control.h DESTINATION include/mon )
install(FILES defines/mutex-helper.h DESTINATION include/mon )
install(FILES defines/class-helper.h DESTINATION include/mon )
# +++++++++++++++++++ install some headers +++++++++++++++++++

# +++++++++++++++++++ applications +++++++++++++++++++
add_dependencies(base config logger network sensordata protocol)
target_link_libraries(base config logger network sensordata protocol)
include_directories( ${GEN_PATH}
                     libraryes/base
                     libraryes/base/singleton
                     libraryes/base/parcer
                     libraryes/base/string
                     libraryes/base/timer
                     libraryes/base/sequrity
                     libraryes/network
                     libraryes/logger
                     libraryes/config
                     libraryes/config/model
                     libraryes/config/rw
                     libraryes/sensordata
                     libraryes/sensordata/data
                     libraryes/sensordata/data/types
                     libraryes/sensordata/parcers
                     libraryes/protocol
                     defines )

function(add_daemon target_name)
  add_dependencies(${target_name} base)
  target_link_libraries(${target_name} base ${GLOBAL_LINK_LIBS})
  install(TARGETS ${target_name} RUNTIME DESTINATION bin )
endfunction(add_daemon)

IF( BUILD_COLLECTOR )
  MESSAGE ( STATUS "---> Processing collector" )
  SET(mon-collector-headers
        daemons/collector/node/cnode.h
        daemons/collector/node/csensor.h
        daemons/collector/node/cnodes.h
        daemons/collector/protocol/ccollectorprotocol.h
        daemons/collector/collector_st.h)
  SET(mon-collector-sources
      daemons/collector/node/cnode.cpp
      daemons/collector/node/csensor.cpp
      daemons/collector/node/cnodes.cpp
      daemons/collector/protocol/ccollectorprotocol.cpp
      daemons/collector/main.cpp )
  include_directories( . )
  add_executable( mon-collector ${mon-collector-headers} ${mon-collector-sources})
  add_daemon(mon-collector)
ENDIF( BUILD_COLLECTOR )

IF( BUILD_NODE )
  MESSAGE ( STATUS "---> Processing node" )
  SET(mon-node-headers
      daemons/node/collector/ccollectors.h
      daemons/node/collector/ccollector.h
      daemons/node/protocol/cnodeprotocol.h
      daemons/node/sensor/csensor.h
      daemons/node/sensor/cframe.h
      daemons/node/sensor/csensorsmanager.h
      daemons/node/node_st.h)
  SET(mon-node-sources
      daemons/node/collector/ccollectors.cpp
      daemons/node/collector/ccollector.cpp
      daemons/node/protocol/cnodeprotocol.cpp
      daemons/node/sensor/csensor.cpp
      daemons/node/sensor/cframe.cpp
      daemons/node/sensor/csensorsmanager.cpp
      daemons/node/main.cpp )
  include_directories( . )
  add_executable( mon-node ${mon-node-headers} ${mon-node-sources})
  target_link_libraries(mon-node dl)
  add_daemon(mon-node)
ENDIF( BUILD_NODE )

IF( BUILD_STORAGE )
  MESSAGE ( STATUS "---> Processing storage" )
  SET(mon-storage-headers
      daemons/storage/storage_st.h
      daemons/storage/cstorage.h
  )
  SET(mon-storage-sources
      daemons/storage/cstorage.cpp
      daemons/storage/main.cpp )
  include_directories( . )
  add_executable( mon-storage ${mon-storage-headers} ${mon-storage-sources})
  target_link_libraries(mon-storage dl)
  add_daemon(mon-storage)
ENDIF( BUILD_STORAGE )
# +++++++++++++++++++ applications +++++++++++++++++++

# +++++++++++++++++++ tools +++++++++++++++++++
IF( BUILD_DEV_TOOLS )
MESSAGE ( STATUS "---> Processing char array generator" )
  add_executable( mon-text-to-char-array tools/mon-text-to-char-array/main.cpp)
  target_link_libraries(mon-text-to-char-array base config logger sensordata dl ${GLOBAL_LINK_LIBS})
  install(TARGETS mon-text-to-char-array RUNTIME DESTINATION bin )

  MESSAGE ( STATUS "---> Processing sensor tester" )
  SET(mon-sensor-test-headers
      daemons/node/sensor/csensor.h
      daemons/node/sensor/cframe.h)
  SET(mon-sensor-test-sources
      daemons/node/sensor/csensor.cpp
      daemons/node/sensor/cframe.cpp
      tools/mon-sensor-test/main.cpp )
  add_executable(mon-sensor-test ${mon-sensor-test-headers} ${mon-sensor-test-sources})
  target_link_libraries(mon-sensor-test base config logger sensordata dl ${GLOBAL_LINK_LIBS})
  install(TARGETS mon-sensor-test RUNTIME DESTINATION bin )
ENDIF( BUILD_DEV_TOOLS )
# +++++++++++++++++++ tools +++++++++++++++++++
