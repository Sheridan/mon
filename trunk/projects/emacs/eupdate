#!/usr/bin/perl -w

use strict;

my $packages = 
{
    'packages' =>
    {
	'CEDET' =>
	{
	    'repository' => 'http://git.code.sf.net/p/cedet/git',
	    'build'      => { 'type' => 'inplace', 'exec' => 'make -j8' }
	},
	'ECB' =>
	{
	    'repository' => 'https://github.com/alexott/ecb'
	},
	'dash' =>
	{
	    'repository' => 'https://github.com/magnars/dash.el'
	},
	'which-key' =>
	{
	    'repository' => 'https://github.com/justbur/emacs-which-key'
	},
	'auto-complete-clang' =>
	{
	    'repository' => 'https://github.com/brianjcj/auto-complete-clang.git'
	},
	'popup' =>
	{
	    'repository' => 'https://github.com/auto-complete/popup-el'
	},
	'company' =>
	{
	    'repository' => 'https://github.com/company-mode/company-mode'
	},
	'yasnippet' =>
	{
	    'repository' => 'https://github.com/capitaomorte/yasnippet'
	},
	'linum-higlite-current-line' =>
	{
	    'repository' => 'git@gist.github.com:1a378156c4b14ea83b79.git'
	},
	'json-mode' =>
	{
	    'repository' => 'https://github.com/joshwnj/json-mode'
	},
	'json-reformat' =>
	{
	    'repository' => 'https://github.com/gongo/json-reformat'
	},
	'json-snatcher' =>
	{
	    'repository' => 'https://github.com/Sterlingg/json-snatcher'
	},
	'rtags' =>
	{
	    'repository' => 'https://github.com/Andersbakken/rtags',
	    'build'      => { 'type' => 'inplace', 'exec' => 'git submodule init && git submodule update && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 . && make -j8' }
	},
	'color-theme-approximate' =>
	{
	    'repository' => 'https://github.com/tungd/color-theme-approximate'
	},
#	'CMake-mode' =>
#	{
#	    'repository' => 'https://github.com/Kitware/CMake/tree/master/Auxiliary'
#	},
	'auto-complete' =>
	{
	    'repository' => 'https://github.com/auto-complete/auto-complete',
	    #'build'      => { 'type' => 'inplace', 'exec' => 'make byte-compile' }
	}
    },
    'themes' =>
    {
	'solarized' =>
	{
	    # 'repository' => 'https://github.com/bbatsov/solarized-emacs'
	    'repository' => 'https://github.com/sellout/emacs-color-theme-solarized'
	}
    }
};

sub update_repository
{
    my ($url, $name, $path) = @_[0..2];
    $path = sprintf("%s/source", $path);
    if(! -e $path)
    {
	printf("Clonning %s to %s ...\n", $name, $path);
	system(sprintf("git clone --recursive %s %s", $url, $path));
    }
    else
    {
	printf("Updating %s ...\n", $name);
	system(sprintf("cd %s && git pull", $path));
    }
}

sub build
{
    my ($name, $build, $path) = @_[0..2];
    my $src_path = sprintf("%s/source", $path);
    
    if($build->{'type'} eq 'inplace')
    {
    	printf("Building %s ...\n", $name);
	system(sprintf("cd %s && %s", $src_path, $build->{'exec'}));
    }
}


sub update_all
{
    for my $type (keys(%{$packages}))
    {
	for my $name (keys(%{$packages->{$type}}))
	{
	    my $path = sprintf("%s/%s", $type, $name);
	    if(exists($packages->{$type}{$name}{'repository'}))
	    {
		update_repository($packages->{$type}{$name}{'repository'}, $name, $path);		
	    }
	    if(exists($packages->{$type}{$name}{'build'}))
	    {
		build($name, $packages->{$type}{$name}{'build'}, $path);		
	    }
	}
    }
}

update_all();
